{"ast":null,"code":"var _jsxFileName = \"/Users/vickykumarprasad/Desktop/chrome/ChromiumExtension/src/components/NewWallet.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Grid, Typography, Button } from '@mui/material';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\nimport { ethers } from 'ethers';\nimport commonStyles from '../styles/commonStyles';\nimport { addMnemonic } from '../redux/projects/projectSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateStep } from '../redux/projects/projectSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewWallet = () => {\n  _s();\n\n  const styles = commonStyles();\n  const dispatch = useDispatch();\n  const myMnemonic = useSelector(state => state.project.mnemonic);\n  const activeStep = useSelector(state => state.project.activeStep);\n  const [loading, setLoading] = React.useState(false);\n  const [defaultAccount, setDefaultAccount] = useState('');\n  const [mnemonic, setMnemonic] = useState('');\n\n  const handleClick = async () => {\n    let mnemonic = ethers.Wallet.createRandom().mnemonic.phrase;\n    setMnemonic(mnemonic);\n    let mnemonicWallet = ethers.Wallet.fromMnemonic(mnemonic);\n    let walletAddress = await mnemonicWallet.getAddress();\n    console.log(walletAddress + ' ' + mnemonicWallet.privateKey);\n    setDefaultAccount(walletAddress);\n  };\n\n  useEffect(() => {\n    const getMnemonic = async () => {\n      let mnemonic = ethers.Wallet.createRandom().mnemonic.phrase;\n      setMnemonic(mnemonic);\n      let mnemonicWallet = ethers.Wallet.fromMnemonic(mnemonic);\n      let walletAddress = await mnemonicWallet.getAddress();\n      console.log(walletAddress + ' ' + mnemonicWallet.privateKey);\n      setDefaultAccount(walletAddress);\n      dispatch(addMnemonic({\n        data: mnemonic\n      }));\n    };\n\n    (myMnemonic === null || myMnemonic === void 0 ? void 0 : myMnemonic.length) === 0 && getMnemonic();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"column\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      className: styles.item,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        align: \"center\",\n        style: {\n          color: '#fff'\n        },\n        children: \"Secret Recovery Phrase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      className: styles.item,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        align: \"center\",\n        style: {\n          color: '#ffdc62'\n        },\n        children: \"This is the only way you will be able to recover your account. Please store it somewhere safe!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      style: {\n        marginBottom: '4rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"3\",\n        readOnly: true,\n        className: styles.walletText,\n        value: myMnemonic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      container: true,\n      xs: true,\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          style: {\n            width: '100%'\n          },\n          onClick: () => dispatch(updateStep({\n            data: activeStep + 1\n          })),\n          disabled: (myMnemonic === null || myMnemonic === void 0 ? void 0 : myMnemonic.length) === 0,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewWallet, \"vfhqm4l9qwMlpwwJkhx2y492ZWE=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = NewWallet;\nexport default NewWallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewWallet\");","map":{"version":3,"sources":["/Users/vickykumarprasad/Desktop/chrome/ChromiumExtension/src/components/NewWallet.jsx"],"names":["React","useEffect","useState","Grid","Typography","Button","LoadingButton","AccountBalanceWalletIcon","ethers","commonStyles","addMnemonic","useDispatch","useSelector","updateStep","NewWallet","styles","dispatch","myMnemonic","state","project","mnemonic","activeStep","loading","setLoading","defaultAccount","setDefaultAccount","setMnemonic","handleClick","Wallet","createRandom","phrase","mnemonicWallet","fromMnemonic","walletAddress","getAddress","console","log","privateKey","getMnemonic","data","length","item","color","marginBottom","walletText","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Grid, Typography, Button } from '@mui/material';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';\nimport { ethers } from 'ethers';\nimport commonStyles from '../styles/commonStyles';\nimport { addMnemonic } from '../redux/projects/projectSlice';\nimport {useDispatch,useSelector} from 'react-redux'\nimport { updateStep } from '../redux/projects/projectSlice';\n\nconst NewWallet = () => {\n  const styles=commonStyles()\n  const dispatch=useDispatch()\n  const myMnemonic=useSelector(state=>state.project.mnemonic)\n  const activeStep = useSelector((state) => state.project.activeStep);\n  const [loading, setLoading] = React.useState(false);\n  const [defaultAccount, setDefaultAccount] = useState('');\n  const [mnemonic, setMnemonic] = useState('');\n\n  const handleClick = async () => {\n    let mnemonic = ethers.Wallet.createRandom().mnemonic.phrase;\n    setMnemonic(mnemonic);\n    let mnemonicWallet = ethers.Wallet.fromMnemonic(mnemonic);\n    let walletAddress = await mnemonicWallet.getAddress();\n    console.log(walletAddress + ' ' + mnemonicWallet.privateKey);\n    setDefaultAccount(walletAddress);\n  };\n\n  useEffect(() => {\n    const getMnemonic = async () => {\n      let mnemonic = ethers.Wallet.createRandom().mnemonic.phrase;\n      setMnemonic(mnemonic);\n      let mnemonicWallet = ethers.Wallet.fromMnemonic(mnemonic);\n      let walletAddress = await mnemonicWallet.getAddress();\n      console.log(walletAddress + ' ' + mnemonicWallet.privateKey);\n      setDefaultAccount(walletAddress);\n      dispatch(addMnemonic({data:mnemonic}))\n      \n    };\n    myMnemonic?.length===0 && getMnemonic();\n  }, []);\n  return (\n    <Grid container direction=\"column\">\n      <Grid item className={styles.item}>\n        <Typography variant=\"h5\" align=\"center\" style={{ color: '#fff' }}>\n          Secret Recovery Phrase\n        </Typography>\n      </Grid>\n      <Grid item className={styles.item}>\n        <Typography variant=\"body1\" align=\"center\" style={{ color: '#ffdc62' }}>\n          This is the only way you will be able to recover your account. Please\n          store it somewhere safe!\n        </Typography>\n      </Grid>\n      <Grid item style={{ marginBottom: '4rem' }}>\n        <textarea\n          rows=\"3\"\n          readOnly\n          className={styles.walletText}\n          value={myMnemonic}\n        />\n      </Grid>\n      <Grid item container xs justifyContent=\"center\">\n        <Grid item xs={12}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ width: '100%' }}\n            onClick={()=> dispatch(updateStep({ data: activeStep + 1 }))}\n            disabled={myMnemonic?.length===0}\n          >\n            Next\n          </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default NewWallet;\n"]},"metadata":{},"sourceType":"module"}